apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Postgres database for various data.
  labels:
    deploy: sourcegraph
  name: pgsql
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: pgsql
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pgsql
        group: backend
    spec:
      containers:
      - env: null
        image: index.docker.io/sourcegraph/postgres-11.4:19-07-15_63c77a05@sha256:21881633991e9548319fcf5b9e2777ddba6404b7d551dedde9e39e5b9287a982
        livenessProbe:
          exec:
            command:
            - /liveness.sh
          initialDelaySeconds: 15
        name: pgsql
        ports:
        - containerPort: 5432
          name: pgsql
        readinessProbe:
          exec:
            command:
            - /ready.sh
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /data
          name: disk
      - env:
        - name: DATA_SOURCE_NAME
          value: postgres://sg:@localhost:5432/?sslmode=disable
        image: wrouesnel/postgres_exporter:v0.5.0@sha256:63b99863928c2cd739f59e156a1994327987729af57b31c0f753c84db3e356ba
        name: pgsql-exporter
        terminationMessagePolicy: FallbackToLogsOnError
      securityContext:
        runAsUser: 0
      volumes:
      - name: disk
        persistentVolumeClaim:
          claimName: pgsql
