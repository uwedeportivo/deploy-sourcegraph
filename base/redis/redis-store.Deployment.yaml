apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: Redis for storing semi-persistent data like user sessions.
  labels:
    deploy: sourcegraph
  name: redis-store
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis-store
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: redis-store
    spec:
      containers:
      - env: null
        image: index.docker.io/sourcegraph/redis-store:19-04-16_6891de821@sha256:56426d601ce1f6d63088fea1cefa61f69a2e809c7d90fc1d157cca63cf81b277
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: redis
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: redis
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /redis-data
          name: redis-data
      - image: index.docker.io/sourcegraph/redis_exporter:18-02-07_bb60087_v0.15.0@sha256:282d59b2692cca68da128a4e28d368ced3d17945cd1d273d3ee7ba719d77b753
        name: redis-exporter
        ports:
        - containerPort: 9121
          name: redisexp
        terminationMessagePolicy: FallbackToLogsOnError
      securityContext:
        runAsUser: 0
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-store
